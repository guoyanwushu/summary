#### 节流和防抖
顾名思义，防抖就是防止抖动，是等稳定之后再进行第一次响应。节流就是第一次响应之后，指定时间间隔后再进行响应。
###
场景: 嗨起点按钮， 按钮按钮就会一直响应，如果点了又会往后台发请求， 就嗨起发!

(1). 方案一
定义一个节流的函数， 然后把事件响应传进去， 来控制。 优点是所有事件响应都可以这样做，不区分组件或者其他什么的东西，缺点就是要手动去调用。所有的事件处理都得包一层，如果后续有要求，不好迭代和进行变更,可维护性和可扩展性比较差
，而且在节流函数出问题的时候会影响到全局的功能。
```javascript
a.onClick = _.throttle(function () {
    console.log('节流啊节流!')
})
b.onClick = _.debounce(function () {
    console.log('节流啊节流!')
})
```
(2). 方案二
试试能不能自定义一个指令什么的， 在指令内部做节流 。。。 这个想法不太可行， 指令是指令，事件是事件，混不到一起的
其实也能做，不过目前遇到的一些情况是有一些局限， 比如v-throttle = 'click(item)', 如果item是当前组件实例里面的数据，依然没问题。但是，如果item是循环里面的数据,比如 item in List
后经过测试，指令不能用上面那种方式写， 用{handler: test, args:[item]}, 这样子 handler和 args会在binding.value里面直接抛出来, 而且item是计算好的值, 就可以直接用了
这个时候item就拿不到, 而且如过写成刚刚的形式，第一次就会执行一次。
(3). 方法一是限制响应， 其实也可以限制触发， 把click拦截一遍，在这里做一些东西，然后只去做适合条件的触发。思路就是提出来一按钮组件，然后在外部定义事件，在里面截取事件，只选合适的丢出去。这个也
有限制，比如说载体不是按钮呢，我想给一个div加截流，就gg了撒。
(4). 从事件源头上去做， 直接在指定时间内禁止掉事件冒泡，都没冒泡上去，事实上也不存在响应的事情了。
```
decument.body.addEventListener('click', function (event) {
    let throttleEvents = []; // 存储当前节流的对象
    if (未节流) { 
        放过去, 然后加到节流对象里面去, 并开启一个删除自己的定时
     }
    if (节流中) {
        event.stopPropgration();
        setTimeout(function () {
         // 从事件对象里面删除   
        })
    }
}, true)   // 事件捕获阶段监听点击，维护一个事件对象的数组，然后每次点击事件触发都去数组里面对比一下是否有了，是否在节流状态
```
这个优点嘛，做得比较绝，流都没得了，就不存在节流的问题。但是也有缺陷，一个是侵入性比较强，如果这个逻辑gg，可能导致整个应用都gg。另外一个所有的点击事件都要过一次，可能根本没有响应事件的元素点击也
会触发，做的事情就比较多余。还要去维护一个定时器做删除操作，性能消耗比前面几个大

